#!/bin/bash
###############################################################################
#Bonus PuzzleBox (pbx2)
#======================
#Once again, your skills are put to the test; you are given a data file
#that contains a scrambled ASCII art image that you must unravel and 
#re-assemble, using only non-interactive command-line tools (no text
#editors! no assistive scripts you didn't write!)
#
#The final image can be identified by a top and bottom row of the 
#uppercase and lowercase vowels of the alphabet. Top row will be the
#uppercase vowels, bottom row the lowercase.
#
#The left and right-most columns contain a sequential line count, 
#ranging from 000 to 031 in octal.
#
#The flow of data is counter-clockwise: it will increment top to
#bottom along the left margin, increment left to right along the
#bottom margin, increment bottom to top along the right margin, and
#then increment right to left along the top margin.
#
#Use your experiences from the projects you've worked on, the various
#experimentation you've done in your own time, referencing the manual
#pages, and applying critical reasoning and common sense to solve this
#puzzle.
#
#Some tools you may want to investigate:
#        - cat(1)
#        - cut(1)
#        - grep(1)
#        - head(1)
#        - paste(1)
#        - sort(1)
#        - tail(1)
#        - tr(1)
#        - uudecode(1)
#        - uniq(1)
#
#This is a bonus project, which means it cannot count against you, only
#for you. As with a knowledge assessment, however, it would be most
#rewarding and effective for you to accomplish this on your own.
#
#You can verify your results by comparing md5sum hashes- I have stored
#the md5sum hash inside the MANIFEST file in the project public
#directory (just as I've done for your other recent projects).
#
#Keep track of your steps, and place them in a working non-interactive
#script by the name of "pbx2steps", which you will submit along with
#your final ASCII art image, stored in a file called: "pbx2.results"
#
#Your "pbx2steps" file, while I would hope you make use of various
#shell facilities (like quotes, variables, wildcards), please do have
#a focus on having the file be readable with respect to comments and
#general file name references.
#
#To submit, do the following:
#
#    submit unix pbx2 pbx2.results pbx2steps
#
#Some things I will be looking for:
#
#    *:pbx2:submitted pbx2.results file via submit tool
#    *:pbx2:submitted pbx2steps file via submit tool
#    *:pbx2:pbx2.results and pbx2steps pushed to lab46 repository
#    *:pbx2:pbx2.results is correctly unscrambled and assembled
#    *:pbx2:pbx2.results md5sum matches project MANIFEST
#    *:pbx2:pbx2steps has valid list of non-interactive instructions
#    *:pbx2:pbx2steps uses shell features like wildcards, IO redir
#    *:pbx2:pbx2steps contains comments explaining process
#    *:pbx2:pbx2steps sets up local project directories
#    *:pbx2:pbx2steps copy data files with with absolute path
#    *:pbx2:pbx2steps all other paths are relative
#    *:pbx2:pbx2steps automates the project when executed
#    *:pbx2:pbx2steps only outputs user-generated messages

cd ~
cd ..
cd ..
cd var
cd public
cd unix
cd pbx2
cp MANIFEST ~/src/unix/projects/pbx2
cd ccattell
cp README ~/src/unix/projects/pbx2
cp pbx2.wav ~/src/unix/projects/pbx2
cd ~
cd src
cd unix
cd projects
cd pbx2
uudecode pbx2.wav
unzip pbx2.xml
ar -xvf pbx2.tar
cat datafile | cut -c 1-28 > half1
cat datafile | cut -c 30-60 > half2
cat half2 | tail -13 > qW
cat half2 | head -13 > qX
cat half1 | tail -13 > qY
cat half1 | head -13 > qZ
cat qW | rev | sort -n > q3
cat qX | tr -d X > rada
tac rada > q1
tac qY | rev > q4
tac qZ > q2
paste -dX q1 q2 > top
paste -dX q3 q4 > bot
cat top bot | tr -d X > test



