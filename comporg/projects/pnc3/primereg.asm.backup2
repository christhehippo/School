section .data
	one db "  ", 0
	two db "  ", 0
	three db "   ", 0
	four db "    ", 0
	five db "     ", 0

section .text
	global _start

_start:
	mov rax, 0 	 	 ; Clear rax
	pop rax    	 	 ; argc
	pop rax	   	 	 ; Program name
	pop rax   		 ; argument one 
	mov r8, rax 	 ; Store number of primes in r8
	mov r9,   4 	 ; Store value to be tested in r9
	mov r10,  2 	 ; Store count of prime numbers in r10
	mov r11,  2 	 ; Store divisor in r11

.L0:				 ; Convert the input from a string to a number	
					 ; Get the digit count
	


.L1:				 ; Divides test val by one divisor

	mov rax,  0 	 ; Clear rax
	mov rdx,  0 	 ; Clear rdx
	mov rax, r9 	 ; Store test num in rax
	div r11     	 ; Divide rax by divisor
	            	 ; Quotient should be in rax, remainder in rdx
	mov r12, rax 	 ; Store quo in r12
	mov r13, rdx 	 ; Store remainder in r13
				 	 ; Check if at test number - 1
	mov rax, r9  	 ; Set rax to test number 
	inc r11      	 ; Divisor +1
	cmp rax, r11 	 ; Compare test num to divisor +1
	je .L3       	 ; Print this number 

	mov rax, 0   	 ; Set rax to 0
	cmp rax, r13 	 ; Compare remainder to 0
	je  .L2		 	 ; 0 test true
	jmp .L1      	 ; 0 test false

.L2:             	 ; Go here when upping test number

	inc r9		 	 ; Test number +1
	mov r11, 2   	 ; Reset value stored in r11
	jmp .L1		 	 ; New number to test

.L3:   			 	 ; Go here to print a number

	cmp r9, 10
	jl .printone 	 ; Check the digits of the number
	cmp r9, 100
	jl .printtwo     ; Two
	cmp r9, 1000
	jl .printthree   ; Three
	cmp r9, 10000
	jl .printfour    ; Four
	
	jmp .printfive   ; Else its 5










.printone:				 
	mov rax, r9      ; Test number to rax
	add rax, 0x30	 ; Increment by hex 30
	mov [one+0], rax ; Move to the ones 'array'
	
	mov rax, 1 		 ; Print one 'array'
	mov rdi, 1
	mov rsi, one
	mov rdx, 1
	syscall
	inc r9			 ; Test num +1
	mov r11, 2
	jmp .L1

.printtwo:				 
	mov rax, 1 
	mov rdi, 1
	mov rsi, two
	mov rdx, 2
	syscall
	
	jmp .L1

.printthree:				 
	mov rax, 1 
	mov rdi, 1
	mov rsi, three
	mov rdx, 3
	syscall
	
	jmp .L1

.printfour:				 
	mov rax, 1 
	mov rdi, 1
	mov rsi, four
	mov rdx, 4
	syscall
	
	jmp .L1

.printfive:				 
	mov rax, 1 
	mov rdi, 1
	mov rsi, five
	mov rdx, 5
	syscall
	
	jmp .L1








	inc r9 			 ; Test number +1
	inc r10		 	 ; Prime count +1


	     
		
	
	


exit:
	mov rax, 60 ; 60 - sysexit system call
	mov rdi, 0
	syscall
