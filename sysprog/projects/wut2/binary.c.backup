//////////////////////////////////////////////////////////
/// binary.c - program to display hex numbers in their
///            binary representation.
///
///  synopsis: binary [OPTION]... [FILE]...
///
///   execute: binary -s "de ad be ef 00 01 5a"
///        or: echo "de ad be ef 00 01 5a" | binary


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <getopt.h>
#include <string.h>

#define  VERSION "0.01"

#define  YES     1
#define  NO      0

void usage      (char *);
void version    (char *);
void outputF	(long, char *, int, FILE *); 

////////////////Vars/////////////////////////////////////
int main (int argc, char **argv)
{
	FILE *output  		= stdout;
	FILE *empty   		= NULL;
	int opt				= 0;
	int option_index    = 0;
	int digits          = 8;
	int verbose_flag 	= NO;
	int quiet_flag		= NO;
	int binary_flag		= NO;
	int octal_flag 		= NO;
	int decimal_flag	= NO;
	int hex_flag 		= YES;
	char *delim 		= " ";       
	char string[250];	   			
	long convTok[250];
	char space[2] 		= " ";
	char *token;
	char *eptr			= "\0";
	int i				= 0;

//	FILE *fp;

	static struct option long_options[] = {
		{ "help", 	 no_argument,       0, 'h' },
		{ "version", no_argument,       0, 'V' },
		{ "string",  required_argument, 0, 's' },
		{ "four",    no_argument, 		0, '4' },
		{ "seven",   no_argument, 		0, '7' },
		{ "eight",   no_argument, 		0, '8' },
		{ "nodelim", no_argument, 		0, 'n' },
		{ "delim",   required_argument, 0, 'd' },
		{ "quiet",   no_argument,       0, 'q' },
		{ "verbose", no_argument,		0, 'v' },
		{ "binary",  no_argument, 		0, 'B' },
		{ "octal",   no_argument,  		0, 'O' },
		{ "decimal", no_argument,		0, 'D' },
		{ "hex",	 no_argument,		0, 'H' },
		{ "file",    required_argument, 0, 'f' },
		{ 0,	     0,					0,  0  }
	};
/////////////////////////////////////////////////////////////////////////

	while ((opt = getopt_long (argc, argv, "hVs:478nd:qvBODHf", long_options, &option_index)) != -1)
	{	
		switch(opt)
		{
			case 'h':
				usage (argv[0]);
				exit (0);
			case 'V':
				version (argv[0]);
				exit (0);
			case 's':
				strcpy(string, optarg);
				break;
			case '4':
				digits = 4;
				break;
			case '7':
				digits = 7;
				break;
			case '8':	
				digits = 8;
				break;
			case 'n':
				delim = NULL;
				break;
			case 'd':
				delim = strdup(optarg);
				break;
			case 'q':
				output = stderr;
				break;
			case 'v':
				verbose_flag = YES;
				break;
			case 'B':
				binary_flag  = YES;
				hex_flag 	 = NO;
				octal_flag   = NO;
				decimal_flag = NO;
				break;
			case 'O':
				octal_flag   = YES;
				binary_flag  = NO;
				hex_flag	 = NO;
				decimal_flag = NO;
				break;
			case 'D':
				decimal_flag = YES;
				binary_flag  = NO;
				hex_flag     = NO;
				octal_flag   = NO;
				break;
			case 'H':
				hex_flag 	 = YES;
				decimal_flag = NO;
				binary_flag  = NO;
				octal_flag	 = NO;
				break;
			case 'f':
				break;
			default:
				break;
		}
	}
/////////////////////////////////////////////////////		

	if (verbose_flag == YES) // Do some verbose stuff
	{
		if (binary_flag == YES)
			fprintf(output, "BINARY INPUT: %s\n", string);
		else if (decimal_flag == YES)
			fprintf(output, "DECIMAL INPUT: %s\n", string);
		else if (octal_flag == YES)
			fprintf(output, "OCTAL INPUT: %s\n", string);
		else
			fprintf(output, "HEX INPUT: %s\n", string);
		
		fprintf(output, "USING BYTE SIZE: %d\n", digits);
		fprintf(output, "USING DELIMETER: '%s'\n", delim);
	}
	
	if (decimal_flag == YES)
	{
		// This all got really complex with the pointers but..	
		token = strtok(string, space);
		// token points to first seperated string piece
		// Then set the converted token to a spot in the long int array using b 10
		convTok[i] = strtol(token, &eptr, 10);
//		printf("%ld\n", convTok[i]);
		
		while (1)
		{	
			// Repeat inside this loop
			// Can't explain why I needed the first part outside the loop
			// but I have an idea as to why
			token = strtok(NULL, space);
			
			if (token == NULL)
				break; // This fixed my seg fault issue 

			convTok[i] = strtol(token, &eptr , 10); 
			i++;									
		}
	}
	else if (octal_flag == YES) // Same as decimal process, but base 8 in strtol
	{
		token = strtok(string, space);
		convTok[i] = strtol(token, &eptr, 8);
//		printf("%ld\n", convTok[i]);
		while (1)
		{	
			token = strtok(NULL, space);
			
			if (token == NULL)
				break;  

			convTok[i] = strtol(token, &eptr , 8); 
//			printf("%ld\n", convTok[i]);
			i++;									
		}
	}
	else if (binary_flag == YES)
	{
		if (quiet_flag == YES) // just end on quiet flag
			return (0);

		token = strtok(string, space);
		fprintf(output, "%s%s", token + strlen(token) - digits, delim);
		while (1)
		{
			token = strtok(NULL, space); // input is binary so return it with variable digits
			if (token == NULL)
				break;
			fprintf(output, "%s%s", token + strlen(token) - digits, delim);
		}
		fprintf(output, "\n");
	}
	else if (hex_flag == YES)  // default case
	{
		token = strtok(string, space);
		convTok[i] = strtol(token, &eptr, 16);
		outputF(convTok[i], delim, digits, output);
		while (1)
		{	
			token = strtok(NULL, space);
			
			if (token == NULL)
				break; 
 
	 		convTok[i] = strtol(token, &eptr , 16); 
			outputF(convTok[i], delim, digits, output);
			i++;									

		}

	}
		

	return (0);
}

void usage (char *name)
{

}

void version (char *name)
{

}

void outputF (long ct, char *delim, int digits, FILE *output)
{
//	fprintf(output, "%ld%s\n", ct, delim);	

	long num      = ct;
	long bin      = 0; // value to represent binary value
	
	bin = 0;

	if (num > 127) //1xxxxxxx
	{
		bin = bin + 10000000;printf("%ld\n", bin);
		if ((num - 128) > 63) // 11xxxxxx
		{
			bin = bin + 1000000;printf("%ld\n", bin);
			if ((num - 192) > 31) // 111xxxxx
			{
				bin = bin + 100000;printf("%ld\n", bin);
				if ((num - 224) > 15) // 1111xxxx
				{
					bin = bin + 10000;printf("%ld\n", bin);
					if ((num - 240) > 7) // 11111xxx
					{
						bin = bin + 1000;printf("%ld\n", bin);
						if ((num - 248) > 3) // 111111xx
						{
							bin = bin + 100;printf("%ld\n", bin);
							if ((num - 252) > 1) // 1111111x
							{
								bin = bin + 10;printf("%ld\n", bin);
								if ((num - 254) > 0) // 11111111
								{
									bin = bin + 1; printf("%ld\n", bin);
								}
							}
							else if ((num - 252) > 0) // 11111101
							{
								bin = bin + 1;
							}
						}
						else if ((num - 248) > 1) // 1111101x
						{
							
						}
						else if ((num - 248) > 0) // 11111001
						{

						}

					}
					else if ((num - 240) > 3) // 111101xx
					{

					}
					else if ((num - 240) > 1) // 1111001x
					{

					}
					else if ((num - 240) > 0) // 11110001
					{

					}
				}
				else if ((num - 224) > 7) // 11101xxx
				{

				}
				else if ((num - 224) > 3) // 11001xx
				{

				}
				else if ((num - 224) > 1) // 110001x
				{

				}
				else if ((num - 224) > 0) // 11000001
				{
					bin = bin + 1;
				}
				

			}
			else if ((num - 128) > 31) // 101xxxxx
			{

			}
			else if ((num - 128) > 15) //1001xxxx
			{

			}
			else if ((num - 128) > 7) // 10001xxx
			{

			}
			else if ((num - 128) > 3) // 100001xx
			{

			}
			else if ((num - 128) > 1) // 1000001x
			{

			}
			else if ((num - 128) > 0) // 10000001
			{

			}
		}
		else if ((num - 128) > 31)
		{

		}
		else if ((num - 128) > 15)
		{
		
		}
		else if ((num - 128) > 7)
		{
		
		}
		else if ((num - 128) > 3)
		{

		}
		else if ((num - 128) > 1)
		{
		
		}
		else if ((num - 128) > 0)
		{

		}
	}
/////////////^^^^^^^8 place is 1^^^^/////////////////			

//	printf("%lu\n", bin);
}
