week3 program:

prompt for input (year)
enter a year: 2014
store value as a short int
obtain the last two digits of the year 2014->14
find 25% of 14
(25 = 10 + 10 + 5)
(10% -> 1.4)
(10% -> 1.4)
(5% -> 0.7)
(sum -> 3.5)
drop decimal point 3.5 -> 3


//
base2  base8  base10   hex(base16)
0000	00	0	0
0001	01	1	1
0010	02	2	2
0011	03	3	3
0100	04	4	4	
0101	05	5	5
0110	06	6	6
0111	07	7	7
1000	10	8	8	
1001	11	9	9
1010	12	10	A
1011	13	11	B
1100	14	12	C
1101	15	13	D
1110	16	14	E
1111	17	15	F
//

14
+3
_______
17


 17
-14
_____
  3

m=1 t=2 w=3 r=4 f=5 sat=6 sun=7

******adjust for leap year******
 Print the day of the week

INPUT TO STDERR



gcc -Wall -o hello hello.c
-Wall =  shows compiler messages even when program can compile, warns you 


negative compiler messages:
-note = compiler telling you something not intended is happening
-warning = syntax is correct but deviating an aspect of the standard, cramming
int into a char
-error = does not compile


----------logical selectors and if statement type stuff----------
===IF===
-if() = exactly 1 if
-if()/else = 0 or 1 elses
-if()/else if() 0 or more else if()'s
-if()/else if()/else() =  only one else at end

if ([condition])
{
	do stuff
}

example:
	char a = 5;
	
	if (a == 5)
	{
		a = a - 1;
	}
	else if
	{
		a = a + 1;
	}

	fprintf (stdout, "%hhd\n", a);
	
Relational Operators:
== - is equal to
!= - is not equal to
< - is less than
> - is greater than
<= - is less than or equal to
>= - is greater than or equal to
&& -  and 
|| -  or

char a = 7, b = 3, c = 5 
if((a == 2) && (b == 3) && (c == 4) //must all be true
{

}

===Switch===
//similar to if statement 
//some cases where if is correct to use, some cases where switch should be used


switch (variable)
{
	case 0:
		
		break;
	case 1:

		break;
	case 12:

		break;
	default:		//default is essentially else
	
		break;
}


===?===

(a==3)?a=a+1 : a=a-1;
//? is a ternary operator
//for condition (a==3), if true do left side of :
// if false do right side of :
//way of rewriting an if statement 


